Description: switch test from ava to tape
Author: Yadd <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2022-11-26

--- a/test/test.js
+++ b/test/test.js
@@ -1,4 +1,4 @@
-import test from 'ava';
+import test from 'tape';
 import ansiStyles, {modifierNames, foregroundColorNames, backgroundColorNames, colorNames} from '../index.js';
 
 test('return ANSI escape codes', t => {
@@ -6,17 +6,20 @@
 	t.is(ansiStyles.bgGreen.open, '\u001B[42m');
 	t.is(ansiStyles.green.close, '\u001B[39m');
 	t.is(ansiStyles.gray.open, ansiStyles.grey.open);
+	t.end();
 });
 
 test('group related codes into categories', t => {
 	t.is(ansiStyles.color.magenta, ansiStyles.magenta);
 	t.is(ansiStyles.bgColor.bgYellow, ansiStyles.bgYellow);
 	t.is(ansiStyles.modifier.bold, ansiStyles.bold);
+	t.end();
 });
 
 test('groups should not be enumerable', t => {
 	t.not(Object.getOwnPropertyDescriptor(ansiStyles, 'modifier'), undefined);
 	t.false(Object.keys(ansiStyles).includes('modifier'));
+	t.end();
 });
 
 test('support conversion to ansi (16 colors)', t => {
@@ -27,6 +30,7 @@
 	t.is(ansiStyles.bgColor.ansi(ansiStyles.rgbToAnsi(255, 255, 255)), '\u001B[107m');
 	t.is(ansiStyles.bgColor.ansi(ansiStyles.hexToAnsi('#990099')), '\u001B[45m');
 	t.is(ansiStyles.bgColor.ansi(ansiStyles.hexToAnsi('#FF00FF')), '\u001B[105m');
+	t.end();
 });
 
 test('support conversion to ansi (256 colors)', t => {
@@ -37,6 +41,7 @@
 	t.is(ansiStyles.bgColor.ansi256(ansiStyles.rgbToAnsi256(255, 255, 255)), '\u001B[48;5;231m');
 	t.is(ansiStyles.bgColor.ansi256(ansiStyles.hexToAnsi256('#990099')), '\u001B[48;5;127m');
 	t.is(ansiStyles.bgColor.ansi256(ansiStyles.hexToAnsi256('#FF00FF')), '\u001B[48;5;201m');
+	t.end();
 });
 
 test('support conversion to ansi (16 million colors)', t => {
@@ -47,11 +52,13 @@
 	t.is(ansiStyles.bgColor.ansi16m(255, 255, 255), '\u001B[48;2;255;255;255m');
 	t.is(ansiStyles.bgColor.ansi16m(...ansiStyles.hexToRgb('#990099')), '\u001B[48;2;153;0;153m');
 	t.is(ansiStyles.bgColor.ansi16m(...ansiStyles.hexToRgb('#FF00FF')), '\u001B[48;2;255;0;255m');
+	t.end();
 });
 
 test('16/256/16m color close escapes', t => {
 	t.is(ansiStyles.color.close, '\u001B[39m');
 	t.is(ansiStyles.bgColor.close, '\u001B[49m');
+	t.end();
 });
 
 test('export raw ANSI escape codes', t => {
@@ -60,10 +67,12 @@
 	t.is(ansiStyles.codes.get(91), 39);
 	t.is(ansiStyles.codes.get(40), 49);
 	t.is(ansiStyles.codes.get(100), 49);
+	t.end();
 });
 
 test('rgb â†’ truecolor is stubbed', t => {
 	t.is(ansiStyles.color.ansi16m(123, 45, 67), '\u001B[38;2;123;45;67m');
+	t.end();
 });
 
 test('non-styles should not be exported', t => {
@@ -73,4 +82,5 @@
 	t.false(backgroundColorNames.some(name => isNonStyle(name)));
 	t.true(backgroundColorNames.every(name => name.startsWith('bg')));
 	t.false(colorNames.some(name => isNonStyle(name)));
+	t.end();
 });
